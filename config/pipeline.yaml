# Layer Pipeline Configuration
# Automates the 7-layer architecture flow for Constitution enforcement

pipeline_name: "Constitution Enforcement Pipeline"
version: "1.0.0"
description: |
  Automated pipeline that connects all 7 layers of the architecture
  to ensure Constitution compliance throughout the development process

# Trigger conditions for pipeline activation
triggers:
  - type: "file_change"
    patterns:
      - "scripts/**/*.py"
      - "tests/**/*.py"
      - "backend/**/*.py"
  - type: "git_event"
    events: ["pre-commit", "pre-push", "post-merge"]
  - type: "schedule"
    cron: "0 */6 * * *"  # Every 6 hours
  - type: "manual"
    command: "python scripts/pipeline_runner.py"

# Layer definitions and execution flow
layers:
  - id: 1
    name: "Constitution"
    description: "Constitutional validation and compliance check"
    tools:
      - name: "ConstitutionalValidator"
        script: "scripts/constitutional_validator.py"
        args: ["--check-all"]
        articles: ["P1-P13"]

  - id: 2
    name: "Execution"
    description: "Task execution and enforcement"
    tools:
      - name: "TaskExecutor"
        script: "scripts/task_executor.py"
        trigger: "on_yaml_change"
        articles: ["P1", "P2"]
      - name: "PreExecutionGuard"
        script: "scripts/pre_execution_guard.py"
        trigger: "before_execution"
        articles: ["P5", "P7"]
    dependencies: [1]

  - id: 3
    name: "Analysis"
    description: "Deep analysis and quality assessment"
    tools:
      - name: "DeepAnalyzer"
        script: "scripts/deep_analyzer.py"
        args: ["--mode", "fast"]
        articles: ["P4", "P5", "P7"]
      - name: "TeamStatsAggregator"
        script: "scripts/team_stats_aggregator.py"
        args: ["--full-scan"]
        articles: ["P6"]
    dependencies: [2]
    parallel: true  # Can run analyzers in parallel

  - id: 4
    name: "Optimization"
    description: "Performance optimization and caching"
    tools:
      - name: "VerificationCache"
        script: "scripts/verification_cache.py"
        args: ["--validate"]
        articles: ["P2", "P7"]
      - name: "CriticalFileDetector"
        script: "scripts/critical_file_detector.py"
        articles: ["P4", "P6"]
    dependencies: [3]

  - id: 5
    name: "Evidence"
    description: "Evidence collection and logging"
    tools:
      - name: "AutomaticEvidenceTracker"
        script: "scripts/automatic_evidence_tracker.py"
        articles: ["P2"]
    dependencies: [2, 3, 4]  # Collects from multiple layers
    always_run: true  # Run even if previous layers fail

  - id: 6
    name: "Knowledge Asset"
    description: "Knowledge base synchronization"
    tools:
      - name: "ObsidianBridge"
        script: "scripts/obsidian_bridge.py"
        args: ["sync"]
        articles: ["P3"]
      - name: "ContextProvider"
        script: "scripts/context_provider.py"
        args: ["update"]
    dependencies: [5]
    delay_seconds: 3  # Wait for evidence to be written

  - id: 7
    name: "Visualization"
    description: "Dashboard and reporting"
    tools:
      - name: "Dashboard"
        script: "scripts/session_dashboard.py"
        optional: true
        articles: []
    dependencies: [3, 6]
    optional: true  # Not critical for pipeline success

# Pipeline execution settings
execution:
  max_parallel: 4
  timeout_seconds: 300
  continue_on_failure: false
  save_state: true
  state_file: "RUNS/pipeline_state.json"

# Quality gates (must pass for pipeline success)
quality_gates:
  - name: "Pass Rate Gate"
    metric: "pass_rate"
    operator: ">="
    threshold: 65
    source: "layer_3.TeamStatsAggregator"

  - name: "Security Gate"
    metric: "security_issues"
    operator: "<="
    threshold: 50
    source: "layer_3.DeepAnalyzer"

  - name: "Cache Integrity"
    metric: "orphaned_entries"
    operator: "=="
    threshold: 0
    source: "layer_4.VerificationCache"

# Notifications
notifications:
  on_success:
    - type: "log"
      message: "[PIPELINE] Successfully completed Constitution enforcement"

  on_failure:
    - type: "log"
      level: "error"
      message: "[PIPELINE] Failed at layer {layer_id}: {error}"

  on_quality_gate_failure:
    - type: "log"
      level: "warning"
      message: "[QUALITY] Gate '{gate_name}' failed: {actual} vs {threshold}"

# Rollback strategy
rollback:
  enabled: true
  on_failure_at_layers: [2, 3]
  actions:
    - "git stash"
    - "python scripts/verification_cache.py --clear"
    - "python scripts/context_provider.py --reset"
