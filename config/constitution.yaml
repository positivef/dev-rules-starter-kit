# Dev Rules Starter Kit - Constitution (헌법)
#
# 프로젝트: 실행형 자산 시스템 (Executable Knowledge Base)
# 목적: 프로그램 개발 시 사용할 기준 시스템 체계
# 버전: 1.0.0
# 비준일: 2025-10-23

---

# ==============================================================================
# 메타데이터
# ==============================================================================

constitution:
  project: "Dev Rules Starter Kit"
  version: "1.0.0"
  ratified_date: "2025-10-23"
  next_review: "2026-01-23"

  philosophy: |
    이 프로젝트는 "실행형 자산 시스템(Executable Knowledge Base)"입니다.

    핵심 개념:
      - 문서가 곧 코드 (YAML 계약서 → TaskExecutor 실행)
      - Constitution(헌법)이 모든 개발의 중심
      - 증거 기반 개발 (모든 실행 결과 자동 기록)
      - 지식 자산화 (Obsidian 자동 동기화 3초)

    이 헌법은:
      - 모든 도구의 존재 이유를 정의
      - 각 도구가 어떤 조항을 검증/집행하는지 명시
      - 프로젝트 개발의 불변 원칙 제공

  scope: |
    이 헌법은 다음에 적용됩니다:
      - 모든 코드 (scripts/, tests/, src/)
      - 모든 작업 정의 (TASKS/*.yaml)
      - 모든 도구 (TaskExecutor, Validators, Analyzers)
      - 모든 문서 (docs/, claudedocs/)
      - CI/CD 파이프라인
      - 개발 워크플로우


# ==============================================================================
# 헌법 조항 (Articles)
# ==============================================================================

articles:

  # ============================================================================
  # 제1조: YAML 계약서 우선 (YAML-First Development)
  # ============================================================================

  - id: "P1"
    name: "YAML 계약서 우선"
    category: "core_workflow"
    priority: "critical"

    principle: |
      모든 중요한 작업은 YAML 계약서로 정의되어야 하며,
      TaskExecutor를 통해 실행되어야 합니다.

    requirements:
      - desc: "3개 이상의 단계가 있는 작업은 YAML로 정의"
        mandatory: true
      - desc: "새 기능 추가는 TASKS/*.yaml로 계약서 작성"
        mandatory: true
      - desc: "YAML 계약서는 다음을 포함해야 함"
        details:
          - "task_id: 고유 식별자"
          - "title: 작업 제목"
          - "acceptance_criteria: 완료 조건"
          - "commands: 실행 명령어"
          - "evidence: 증거 파일 목록"
          - "gates: 헌법 검증 게이트"

    rationale: |
      YAML 계약서는:
        - 작업을 명확하게 정의 (실행 가능한 문서)
        - 증거를 자동 수집 (재현 가능)
        - 지식으로 자산화 (Obsidian 동기화)
        - 팀원 간 작업 공유 용이

    enforcement:
      tool: "TaskExecutor"
      method: "YAML 파싱 및 실행"
      violation_severity: "high"

    examples:
      good: |
        # TASKS/FEAT-2025-10-23-01.yaml
        task_id: "FEAT-2025-10-23-01"
        title: "사용자 인증 API 추가"
        commands:
          - id: "01-implement"
            exec:
              cmd: "python"
              args: ["-m", "pytest", "tests/test_auth.py"]
        gates:
          - type: "constitutional"
            articles: ["P4", "P5"]

      bad: |
        # ❌ 그냥 코드 작성
        vim src/auth.py
        # 계약서 없음 → 증거 없음 → 지식 휘발

  # ============================================================================
  # 제2조: 증거 기반 개발 (Evidence-Based Development)
  # ============================================================================

  - id: "P2"
    name: "증거 기반 개발"
    category: "quality_assurance"
    priority: "critical"

    principle: |
      모든 실행 결과는 RUNS/evidence/에 자동으로 기록되어야 하며,
      모든 주장은 증거로 검증 가능해야 합니다.

    requirements:
      - desc: "모든 TaskExecutor 실행은 증거 생성"
        mandatory: true
      - desc: "증거는 다음을 포함"
        details:
          - "실행 로그 (JSON + 텍스트)"
          - "검증 결과 (VerificationResult)"
          - "Provenance (SHA256 해시)"
          - "타임스탬프 및 실행 환경"
      - desc: "증거는 최소 3개월 보관"
        mandatory: true

    rationale: |
      증거 기반 개발은:
        - 재현성 보장 (누가 언제 무엇을 했는지)
        - 디버깅 용이 (문제 발생 시 추적 가능)
        - 학습 가능 (과거 작업에서 배움)
        - 신뢰성 향상 (Trust Score 제공)

    enforcement:
      tool: "EvidenceLogger"
      method: "자동 로그 수집 (RUNS/evidence/)"
      violation_severity: "high"

    storage:
      location: "RUNS/evidence/YYYYMMDD/"
      format: "JSON + plain text"
      retention: "90 days"

  # ============================================================================
  # 제3조: 지식 자산화 (Knowledge Asset Management)
  # ============================================================================

  - id: "P3"
    name: "지식 자산화"
    category: "knowledge_management"
    priority: "high"

    principle: |
      모든 작업은 Obsidian에 자동으로 동기화되어,
      실행형 지식 자산으로 변환되어야 합니다.

    requirements:
      - desc: "TaskExecutor 완료 시 Obsidian 자동 동기화"
        mandatory: true
        target_time: "3초 이내"
      - desc: "자동 생성되는 문서"
        details:
          - "개발일지 (YYYY-MM-DD_작업제목.md)"
          - "작업 체크리스트 업데이트"
          - "MOC (Map of Content) 자동 갱신"
      - desc: "양방향 동기화 (프로젝트 ↔ Obsidian)"
        mandatory: false

    rationale: |
      지식 자산화는:
        - 수동 문서 작성 95% 절감 (20분 → 3초)
        - 지식 휘발 방지 (자동 기록)
        - 팀 지식 공유 (Obsidian 볼트 공유)
        - 과거 작업 재활용 (검색 가능)

    enforcement:
      tool: "ObsidianBridge"
      method: "TaskExecutor 완료 훅"
      violation_severity: "medium"

    metrics:
      time_saved: "95% (20min → 3sec)"
      annual_savings: "264 hours"

  # ============================================================================
  # 제4조: SOLID 원칙 준수 (SOLID Principles)
  # ============================================================================

  - id: "P4"
    name: "SOLID 원칙 준수"
    category: "code_quality"
    priority: "high"

    principle: |
      모든 코드는 SOLID 원칙을 준수해야 하며,
      위반 시 자동으로 감지되고 수정되어야 합니다.

    requirements:
      - desc: "Single Responsibility Principle (SRP)"
        checks:
          - "함수는 50줄 이하"
          - "클래스는 10개 메서드 이하"
          - "중첩 깊이 3단계 이하"
        severity: "medium"

      - desc: "Dependency Inversion Principle (DIP)"
        checks:
          - "구체 클래스 직접 인스턴스화 금지"
          - "의존성 주입 (Dependency Injection) 사용"
        severity: "high"

      - desc: "복잡도 제한"
        checks:
          - "Cyclomatic Complexity < 10"
          - "함수 파라미터 < 5개"
        severity: "medium"

    rationale: |
      SOLID 원칙은:
        - 유지보수성 향상
        - 테스트 용이성
        - 코드 재사용성
        - 버그 감소

    enforcement:
      tool: "DeepAnalyzer"
      method: "AST 기반 자동 검증"
      violation_severity: "medium"
      penalty: "-0.5점 per violation"

    quality_impact:
      weight: "30%"
      max_penalty: "-3.0점"

  # ============================================================================
  # 제5조: 보안 우선 (Security First)
  # ============================================================================

  - id: "P5"
    name: "보안 우선"
    category: "security"
    priority: "critical"

    principle: |
      모든 코드는 보안 이슈가 없어야 하며,
      Critical 등급 이슈는 즉시 수정되어야 합니다.

    requirements:
      - desc: "Critical 보안 이슈 0개"
        mandatory: true
        checks:
          - "하드코딩된 비밀번호/키 금지"
          - "eval() / exec() 사용 금지"
          - "pickle.loads() 사용 금지"

      - desc: "Major 보안 이슈 < 5개"
        mandatory: true
        checks:
          - "SQL 인젝션 방지"
          - "검증 없는 사용자 입력 금지"
          - "subprocess shell=True 금지"

      - desc: "환경 변수 사용"
        mandatory: true
        example: "password = os.getenv('PASSWORD')"

    rationale: |
      보안 우선은:
        - 데이터 유출 방지
        - 시스템 안정성
        - 신뢰성 확보
        - 컴플라이언스 준수

    enforcement:
      tool: "DeepAnalyzer"
      method: "패턴 매칭 + AST 분석"
      violation_severity: "critical"
      penalty: "-1.0점 per critical issue"

    quality_impact:
      weight: "40%"
      max_penalty: "-4.0점"

    response:
      critical: "즉시 수정 (1시간 이내)"
      major: "당일 수정"
      minor: "주간 스프린트 내"

  # ============================================================================
  # 제6조: 품질 게이트 (Quality Gate)
  # ============================================================================

  - id: "P6"
    name: "품질 게이트"
    category: "quality_assurance"
    priority: "high"

    principle: |
      프로젝트는 항상 최소 품질 기준을 충족해야 하며,
      Quality Gate 통과가 배포 조건입니다.

    requirements:
      - desc: "평균 품질 점수 ≥ 7.0/10"
        mandatory: true
        threshold: 7.0

      - desc: "테스트 통과율 ≥ 80%"
        mandatory: true
        threshold: 80.0

      - desc: "보안 이슈 (Critical) 0개"
        mandatory: true
        threshold: 0

    rationale: |
      품질 게이트는:
        - 최소 품질 기준 보장
        - 기술 부채 관리
        - 팀 품질 의식 향상
        - 프로덕션 안정성

    enforcement:
      tool: "TeamStatsAggregator"
      method: "전체 프로젝트 통계 집계"
      violation_severity: "high"

    dashboard:
      display: "Quality Gate (PASS/FAIL)"
      location: "Streamlit Dashboard 상단"
      update_frequency: "실시간"

    grading_system:
      A: "9.0 - 10.0 (🟢 훌륭함)"
      B: "8.0 - 8.9 (🟢 좋음)"
      C: "7.0 - 7.9 (🟡 보통)"
      D: "6.0 - 6.9 (🟡 개선 필요)"
      F: "0.0 - 5.9 (🔴 즉시 수정)"

  # ============================================================================
  # 제7조: Hallucination 방지 (Anti-Hallucination)
  # ============================================================================

  - id: "P7"
    name: "Hallucination 방지"
    category: "ai_safety"
    priority: "medium"

    principle: |
      AI 생성 코드는 Hallucination 위험을 검증해야 하며,
      불완전한 구현은 배포되지 않아야 합니다.

    requirements:
      - desc: "TODO/FIXME 주석 금지 (프로덕션)"
        mandatory: true

      - desc: "절대적 주장 금지"
        examples:
          - "always works"
          - "never fails"
          - "100% guaranteed"
          - "perfectly optimized"

      - desc: "Placeholder 값 금지"
        examples:
          - "placeholder"
          - "mock"
          - "fake"
          - "dummy"

      - desc: "NotImplementedError 금지"
        exception: "추상 클래스 제외"

    rationale: |
      Hallucination 방지는:
        - AI 생성 코드 품질 보장
        - 불완전 구현 방지
        - 과장된 주장 제거
        - 실제 작동하는 코드만 배포

    enforcement:
      tool: "DeepAnalyzer"
      method: "패턴 매칭"
      violation_severity: "low"
      penalty: "-0.1점 per risk"

    quality_impact:
      weight: "10%"
      max_penalty: "-1.0점"

  # ============================================================================
  # 제8조: 테스트 우선 (Test-First Development)
  # ============================================================================

  - id: "P8"
    name: "테스트 우선"
    category: "development_process"
    priority: "high"

    principle: |
      모든 기능은 테스트를 먼저 작성한 후 구현해야 하며,
      테스트 커버리지는 90% 이상이어야 합니다.

    requirements:
      - desc: "테스트 커버리지 ≥ 90%"
        mandatory: true
        threshold: 90.0

      - desc: "Red-Green-Refactor 사이클"
        steps:
          - "1. 테스트 작성 (Red)"
          - "2. 최소 구현 (Green)"
          - "3. 리팩토링 (Refactor)"

      - desc: "통합 테스트 우선"
        rationale: "Mock보다 실제 환경 테스트"

    enforcement:
      tool: "pytest + coverage"
      method: "CI/CD 파이프라인"
      violation_severity: "high"

  # ============================================================================
  # 제9조: Conventional Commits (커밋 표준)
  # ============================================================================

  - id: "P9"
    name: "Conventional Commits"
    category: "version_control"
    priority: "medium"

    principle: |
      모든 커밋은 Conventional Commits 표준을 따라야 하며,
      자동 버전 관리(Semantic Release)를 지원해야 합니다.

    format: "<type>(<scope>): <subject>"

    types:
      feat: "새 기능 (MINOR 버전 증가)"
      fix: "버그 수정 (PATCH 버전 증가)"
      docs: "문서 변경"
      refactor: "리팩토링"
      perf: "성능 개선 (PATCH)"
      test: "테스트 추가/수정"
      chore: "빌드/설정 변경"
      breaking: "Breaking change (MAJOR 버전 증가)"

    scopes:
      - "api"
      - "db"
      - "auth"
      - "ui"
      - "core"
      - "config"
      - "deploy"
      - "docs"
      - "test"
      - "security"

    enforcement:
      tool: "Commitlint"
      method: "Pre-commit hook"
      violation_severity: "medium"

  # ============================================================================
  # 제10조: Windows 인코딩 준수 (Emoji 금지)
  # ============================================================================

  - id: "P10"
    name: "Windows 인코딩 준수"
    category: "compatibility"
    priority: "medium"

    principle: |
      Windows 환경 호환성을 위해 코드에서 이모지 사용을 금지하며,
      ASCII 대체 문자를 사용해야 합니다.

    prohibited:
      - desc: "Python 코드에서 이모지 금지"
        files: "*.py"
      - desc: "YAML 파일에서 이모지 금지"
        files: "*.yaml, *.yml"
      - desc: "Shell 스크립트에서 이모지 금지"
        files: "*.sh, *.bat"

    allowed:
      - "Markdown 문서 (*.md)"
      - "HTML 파일"
      - "사용자 UI (Streamlit 등)"

    replacements:
      "✅": "[OK] or [SUCCESS]"
      "❌": "[FAIL] or [ERROR]"
      "⚠️": "[WARN]"
      "📝": "[LOG] or [FILE]"
      "🚀": "[DEPLOY]"
      "🔧": "[CONFIG]"

    rationale: |
      Windows cp949 인코딩은 이모지를 지원하지 않아
      UnicodeEncodeError가 발생합니다.

    enforcement:
      tool: "Pre-commit hook"
      method: "Regex 패턴 검사"
      violation_severity: "low"

  # ============================================================================
  # 제11조: 원칙 충돌 검증 (Principle Conflict Resolution)
  # ============================================================================

  - id: "P11"
    name: "원칙 충돌 검증"
    category: "governance"
    priority: "critical"

    principle: |
      새로운 기능이나 변경 사항이 과거 지시 또는 기존 원칙과 충돌할 경우,
      AI는 반드시 충돌을 리마인드하고 양측 관점을 제시해야 한다.

    requirements:
      - desc: "과거 지시 충돌 감지 트리거"
        triggers:
          - "새 Layer 추가"
          - "아키텍처 변경"
          - "도구 역할 변경"
          - "Constitution 조항 해석 변경"
          - "핵심 개념 재정의"
        mandatory: true

      - desc: "충돌 시 리마인드 포함사항"
        details:
          - "과거 지시 원문 인용 (날짜 포함)"
          - "새 제안과의 충돌 지점 명시"
          - "충돌 발생 맥락 설명"
          - "Git history 참조 (가능 시)"
        mandatory: true

      - desc: "양측 관점 제시 필수"
        format: |
          과거 원칙: [인용]
          새 제안: [설명]
          충돌 지점: [명시]

          Option A: 과거 원칙 유지
          Option B: 새 제안 적용

          (각 옵션의 장단점은 P12 적용)
        mandatory: true

    rationale: |
      과거 지시 무시의 위험:
        - 일관성 없는 시스템으로 변질
        - 방향성 상실 (예: Streamlit 대시보드를 주 목표로 착각)
        - 사용자 의도 왜곡
        - 기술 부채 누적

      리마인드 효과:
        - 사용자가 과거 결정 재검토 기회
        - 진화 vs 일관성 중 의식적 선택
        - 의사결정 투명성 확보
        - 시스템 정합성 유지

    enforcement:
      tool: "ConstitutionalValidator"
      method: "Git history + session memory 검색"
      automated: false  # 현재는 수동 검토
      violation_severity: "critical"

    examples:
      good: |
        # 사용자: "Streamlit 대시보드 추가해줘"

        AI: "⚠️ 원칙 충돌 감지 (P11)

        과거 지시 (2025-10-20):
        '이 프로젝트는 Constitution 중심 개발 체계다'

        새 제안:
        Layer 7 추가 (Streamlit Dashboard)

        충돌 지점:
        대시보드가 주 제품으로 오해될 위험

        Option A: Layer 7 추가 + 완화 전략
        Option B: 미추가 (현상 유지)

        (P12 트레이드오프 분석 참조)"

      bad: |
        # ❌ 충돌 감지했지만 리마인드 안 함

        AI: "네! Streamlit 대시보드 만들겠습니다!"
        (내부: Constitution 중심인데... 뭐 괜찮겠지)

        → 결과: 2주 후 "대시보드가 주 목표인 줄 착각" 발견

  # ============================================================================
  # 제12조: 트레이드오프 분석 의무 (Trade-off Analysis Mandate)
  # ============================================================================

  - id: "P12"
    name: "트레이드오프 분석 의무"
    category: "governance"
    priority: "critical"

    principle: |
      모든 주요 결정에 대해 AI는 양측 관점의 장단점을
      객관적 근거와 함께 제시해야 하며, 최종 결정은 사용자가 한다.

    requirements:
      - desc: "트레이드오프 분석 필수 항목"
        details:
          - "Option A vs Option B 명시"
          - "각 옵션의 장점 (객관적 근거)"
          - "각 옵션의 단점 (객관적 근거)"
          - "ROI 계산 (측정 가능 시)"
          - "위험도 평가 (Innovation Safety 기준)"
          - "적용 전후 비교"
        mandatory: true

      - desc: "객관적 근거 필수 출처"
        sources:
          - "과거 증거 (RUNS/evidence/)"
          - "측정 가능한 메트릭"
          - "유사 사례 (Git history, Obsidian)"
          - "Constitution 조항 인용"
          - "업계 표준 (공식 문서)"
        mandatory: true
        min_sources: 2  # 최소 2개 출처

      - desc: "추천 시 근거 명시"
        format: |
          추천: [Option X]

          근거:
            1. [측정 가능한 이유 + 출처]
            2. [과거 증거 기반 + 출처]
            3. [위험도 평가 결과]

          반론 (Option Y 선택 시):
            - [예상 문제점]
            - [완화 방안]
        mandatory: true

      - desc: "Innovation Safety 통합"
        checklist:
          - "Why? (현재 한계)"
          - "What if fails? (실패 영향)"
          - "How to rollback? (5분 내 복구 가능?)"
          - "Monitoring plan? (조기 감지)"
          - "User impact? (사용자 영향)"
        mandatory: true

    rationale: |
      AI 편향 방지:
        - 한쪽 관점만 제시 금지
        - 사용자가 전체 그림 이해
        - 확증 편향 (Confirmation Bias) 차단

      책임 소재 명확화:
        - AI: 객관적 분석 책임
        - 사용자: 최종 결정 책임
        - 역할 분리로 신뢰 확보

      증거 기반 결정 (P2 강화):
        - 주관적 추천 금지
        - 모든 주장은 근거 필요
        - 재현 가능한 의사결정

    enforcement:
      tool: "Human review (사용자 검토)"
      method: "체크리스트 제공"
      automated: false
      violation_severity: "high"

    decision_authority:
      ai_role: "객관적 분석 및 추천 제공"
      user_role: "최종 승인/거부 결정"

    examples:
      good: |
        # Streamlit 대시보드 추가 결정

        Option A: Streamlit 추가
        장점:
          - 시각화 개선 +30% (근거: 유사 프로젝트 사례)
          - P6 준수 현황 표시 (근거: Constitution P6 조항)
        단점:
          - 방향성 혼동 위험 ⚠️ 높음 (근거: 방금 경험)
          - 복잡도 +19% (근거: 코드량 측정)

        Option B: 미추가
        장점:
          - 단순성 유지 (근거: 현재 코드량)
        단점:
          - 시각화 부족 (근거: 사용자 불편)

        추천: Option A + 완화 전략
        근거:
          1. ROI 200% (근거: 절감 시간 계산)
          2. 완화 가능 (근거: Constitution.yaml 작성)
          3. 위험 낮음 (근거: 롤백 즉시 가능)

      bad: |
        # ❌ 한쪽 관점만

        AI: "Streamlit이 좋습니다! 시각화가 훌륭해요!"
        (단점 언급 없음, 근거 없음, 대안 제시 없음)

  # ============================================================================
  # 제13조: 헌법 수정 검증 (Constitutional Amendment Validation)
  # ============================================================================

  - id: "P13"
    name: "헌법 수정 검증"
    category: "meta_governance"
    priority: "critical"

    principle: |
      Constitution에 새 조항을 추가하거나 기존 조항을 수정할 때는
      반드시 타당성 검증을 거쳐야 하며, 최종 승인은 사용자가 한다.

      이 원칙은 P13 자체 추가에도 적용된다 (재귀적 적용).

    requirements:
      - desc: "타당성 검증 필수 항목"
        details:
          - "필요성: 왜 이 조항이 필요한가?"
          - "효과성: 실제 문제를 해결하는가?"
          - "ROI: 투자 대비 효과는?"
          - "위험: 부작용은 무엇인가?"
          - "복잡도: Constitution이 비대해지지 않는가?"
          - "충돌: 기존 조항과 모순되지 않는가?"
        mandatory: true

      - desc: "트레이드오프 분석 (P12 적용)"
        details:
          - "Option A: 조항 추가"
          - "Option B: 조항 미추가"
          - "각 옵션의 장단점 + 근거"
          - "ROI 계산"
          - "장기 영향 (5년 관점)"
        mandatory: true

      - desc: "사용자 승인 의무"
        process: |
          1. AI: 타당성 분석 제공
          2. AI: 트레이드오프 분석 (P12)
          3. AI: 추천 + 근거 제시
          4. 사용자: 최종 승인/거부
        mandatory: true

    self_application: true  # P13 추가 시에도 이 프로세스 적용됨

    enforcement:
      tool: "Human review (사용자 검토)"
      method: "명시적 승인 요구"
      automated: false
      violation_severity: "critical"

    decision_authority:
      ai_role: "타당성 분석 및 추천 제공"
      user_role: "최종 승인/거부 결정"

    limits:
      max_articles: 20  # Constitution 최대 20개 조항
      max_length_per_article: 150  # 조항당 최대 150줄
      review_period: "3개월"  # 전체 검토 주기

    rationale: |
      헌법 비대화 방지:
        - 5년 후 50개 조항 → 관리 불가
        - 모든 조항이 검증됨 → 품질 보장
        - 최대 20개 제한 → 집중도 유지

      품질 보장:
        - 불필요한 조항 추가 방지
        - 모순 조항 사전 차단
        - 명확성 유지

      재귀적 완전성:
        - Constitution이 자기 수정도 규정
        - 법학의 "헌법 개정 절차"와 동일
        - 무한 재귀 방지 (사용자 승인으로 루프 끊음)

    examples:
      good: |
        # P11, P12, P13 추가 (지금!)

        1. 타당성 검증:
           필요성: ✅ 방향성 상실 방지 (Streamlit 착각 사례)
           효과성: ✅ 실제 문제 해결
           ROI: ✅ P11,P12: 267%, P13: 438%
           위험: ⚠️ 복잡도 +31% (800→1,050줄)
           충돌: ✅ 없음, 기존 조항 강화

        2. 트레이드오프:
           Option A: 추가 (ROI 350%+, 실제 문제 해결)
           Option B: 미추가 (단순, 하지만 비대화 위험)

        3. 추천: Option A
           근거:
             - 실제 경험 (방향성 상실)
             - ROI 매우 높음 (350%+)
             - 장기 유지보수 절감 (5시간/년)

        4. 사용자 승인: [승인됨 ✅]

      bad: |
        # ❌ 검증 없이 추가

        - id: "P14"
          name: "모든 변수명은 한글로"
          # 타당성 검증 없음
          # ROI 계산 없음
          # 트레이드오프 분석 없음
          # 사용자 승인 없음

          → Constitution 비대화 + 품질 저하

  # ============================================================================
  # 제14조: 2차 효과 분석 (Second-Order Effects Analysis)
  # ============================================================================

  - id: "P14"
    name: "2차 효과 분석"
    category: "meta_governance"
    priority: "high"

    principle: |
      모든 개선 사항은 그 개선 자체가 야기할 부작용(2차 효과)을
      분석하고 완화 전략을 수립해야 한다.

      "유연성을 높이는 개선이 일관성을 해칠 수 있다"

    requirements:
      - desc: "Innovation Safety 체크리스트 (INNOVATION_SAFETY_PRINCIPLES.md)"
        checklist:
          - "Why? (현재 시스템의 한계는 무엇인가)"
          - "What if fails? (실패 시 비즈니스 영향은)"
          - "How to rollback? (5분 내 복구 가능한가)"
          - "Monitoring plan? (문제를 어떻게 조기 감지할 것인가)"
          - "User impact? (사용자가 느낄 부정적 영향은)"
        mandatory: true

      - desc: "부작용 완화 매트릭스 작성"
        format: |
          개선안: [설명]

          1차 효과 (직접적):
            긍정: [측정 가능한 이점]
            부정: [예상되는 문제]

          2차 효과 (간접적):
            긍정: [장기적 이점]
            부정: [부작용]

          완화 전략:
            - [부작용 1] → [완화 방안 + 측정 지표]
            - [부작용 2] → [완화 방안 + 측정 지표]

          모니터링:
            - [지표 1]: 목표 [값]
            - [지표 2]: 목표 [값]
        mandatory: true

      - desc: "자동 에스컬레이션 설정"
        triggers:
          - "완화 지표가 목표치 이탈 시"
          - "3개월 연속 부작용 발생 시"
          - "사용자 불만 증가 추세 시"
        action: "개선안 재검토 또는 롤백"
        mandatory: true

    rationale: |
      실제 사례 (유연성 추가):
        1차 효과: 채택률 30% → 90% (긍정)
        2차 효과: Override 남용 → 일관성 저하 (부정)
        완화: Minimum Viable Constitution + 모니터링

      무한 개선 루프 방지:
        - 개선 A → 부작용 B → 개선 C → 부작용 D → ...
        - P14 적용 → 각 개선마다 부작용 예측 및 완화
        - 순환 고리 끊기

      지속 가능한 개선:
        - 단기 이익 vs 장기 안정성
        - 빠른 성장 vs 기술 부채
        - 유연성 vs 일관성

    enforcement:
      tool: "Human review + PR template"
      method: "P14 섹션 필수 작성"
      automated: false  # 향후 자동화 검토
      violation_severity: "high"

    pr_template_addition: |
      ## [P14] Second-Order Effects Analysis

      ### 1st Order Effects
      - Positive: [직접적 이점]
      - Negative: [직접적 문제]

      ### 2nd Order Effects
      - Positive: [간접적 이점]
      - Negative: [간접적 부작용]

      ### Mitigation Strategy
      1. [부작용] → [완화 방안] (측정: [지표])
      2. [부작용] → [완화 방안] (측정: [지표])

      ### Monitoring Plan
      - [지표]: [목표치] (현재: [값])
      - Alert: [조건]

    examples:
      good: |
        # 유연성 개선 (Progressive Adoption) 제안

        1차 효과:
          긍정: 채택률 30% → 90%, 초기 저항 감소
          부정: 개발 시간 +2주

        2차 효과:
          긍정: 장기 유지보수 비용 -60%
          부정: Override 남용 가능성 (일관성 저하)

        완화 전략:
          - Override 남용 → Minimum Viable Constitution (4개 규칙 강제)
            측정: Override 사용률 < 10%
          - 일관성 저하 → 자동 에스컬레이션 (Level 0 > 2주)
            측정: Level 진행률 분기별 +1

        모니터링:
          - Override 사용률: 목표 < 10% (현재: 5%)
          - Level 0 체류 기간: 목표 < 2주 (현재: 1주)
          - Alert: 사용률 > 20% 시 경고

      bad: |
        # ❌ 부작용 분석 없이 개선

        제안: "모든 규칙을 선택적으로!"

        효과: 채택률 100% 달성!

        # 2차 효과 분석 없음
        # 완화 전략 없음
        # 모니터링 없음

        → 결과: 3개월 후 일관성 0%, 시스템 붕괴

  # ============================================================================
  # 제15조: 수렴 원칙 (Convergence Principle)
  # ============================================================================

  - id: "P15"
    name: "수렴 원칙"
    category: "meta_governance"
    priority: "critical"

    principle: |
      Constitution은 무한히 확장되지 않으며,
      "충분히 좋은(Good Enough)" 상태에 수렴해야 한다.

      목표: 80% 품질 달성 후 안정화 (100% 추구 금지)

    requirements:
      - desc: "중단 조건 (Stop Conditions)"
        triggers:
          - "ROI > 300% 달성"
          - "팀 만족도 > 80%"
          - "3개월간 안정적 운영"
          - "새 제안 ROI < 150%"
        action: "개선 중단, 안정화 단계 진입"
        mandatory: true

      - desc: "위험 신호 (Danger Signs)"
        indicators:
          - "매달 새 조항 추가"
          - "Constitution > 20개 조항"
          - "복잡도 예산 초과 (>1500 lines)"
          - "팀원들이 헷갈려함"
        action: "즉시 단순화 작업"
        mandatory: true

      - desc: "80/20 Rule 적용"
        principle: "Core 10개 조항이 80% 가치 제공"
        calculation: |
          ROI = improvement_gain / improvement_effort

          if ROI < 0.5:
              return "Not worth it! 현재가 충분히 좋음"

          if current_quality >= 80:
              return "Good enough! 멈춰라"
        mandatory: true

      - desc: "복잡도 예산 (Complexity Budget)"
        limits:
          max_articles: 20
          max_lines_per_article: 150
          max_total_lines: 1500
          max_tools: 15
        enforcement: "예산 초과 시 통합/제거 필수"
        mandatory: true

    sunset_clauses:
      one_year_rule: "1년간 미사용 조항 → 제거 검토"
      roi_rule: "1년간 ROI < 100% → 폐지 검토"
      replacement_rule: "더 나은 조항 등장 → 통합"
      overlap_rule: "중복 기능 → 하나로 병합"

    magic_number: |
      The Magic Number: 15 articles

      - Core (P1-P10): 80% 가치
      - Governance (P11-P13): 15% 가치
      - Meta (P14-P15): 5% 가치
      - Total: 100% 가치

      → 16개째부터 ROI 급감!

    rationale: |
      무한 개선 루프 방지:
        - 개선 → 부작용 → 개선 → 부작용 → ...
        - P15 적용 → 80% 도달 시 멈춤
        - 안정화 우선

      실용주의:
        - 80점이면 충분하다
        - 100점 추구는 비효율 (ROI < 0.5)
        - 완벽주의 ≠ 생산성

      지속 가능성:
        - Constitution 비대화 방지
        - 팀 인지 부하 관리
        - 장기 유지보수 가능

    enforcement:
      tool: "ConstitutionalValidator + Human review"
      method: "분기별 ROI 검토 + 복잡도 측정"
      automated: true  # 복잡도 자동 측정
      violation_severity: "high"

    quarterly_review:
      schedule: "3개월마다"
      checklist:
        - "ROI 검토 (각 조항)"
        - "복잡도 측정 (총 라인 수)"
        - "사용 빈도 분석"
        - "통합 가능 조항 탐색"
        - "제거 후보 선정"

    decision_framework: |
      새 조항 제안 시:

      if ROI < 1.5x:
          reject("ROI 부족")
      elif complexity > 150 lines:
          reject("단순화 필요")
      elif total_articles >= 20:
          require("기존 조항 제거 or 통합")
      elif stable_for_6months:
          reject("안정화 단계 - 개선 중단")
      else:
          accept("P14로 2차 효과 검증")

    examples:
      good: |
        # 분기별 리뷰 (2025-Q4)

        현재 상태:
          - 조항 수: 15개
          - 총 라인: 1,400줄
          - ROI: 377%
          - 팀 만족도: 85%
          - 안정 운영: 3개월

        중단 조건 체크:
          ✅ ROI > 300%
          ✅ 만족도 > 80%
          ✅ 3개월 안정
          ✅ 신규 제안 없음

        결정: 개선 중단, 안정화 단계 진입

        다음 리뷰: 2026-Q1 (유지보수만)

      bad: |
        # ❌ 무한 개선

        매달 새 조항 추가:
          2025-10: P14, P15 추가 (OK, 필요함)
          2025-11: P16 "코드 리뷰 자동화"
          2025-12: P17 "성능 모니터링"
          2026-01: P18 "UI 테스트"
          ...
          2026-06: P30 "???"

        문제:
          - Constitution 1,800줄 (예산 초과)
          - 팀원 혼란 ("어떤 규칙 따라야 해?")
          - 복잡도 폭발 → 아무도 안 지킴
          - ROI 마이너스

        → P15 위반: 수렴하지 않고 발산


# ==============================================================================
# 도구 매핑 (Tools Mapping)
# ==============================================================================

tools:
  # 각 도구가 어떤 헌법 조항을 검증/집행하는지 명시

  TaskExecutor:
    description: "YAML 계약서 실행 엔진"
    enforces:
      - "P1: YAML 계약서 우선"
      - "P2: 증거 기반 개발"
    role: "핵심 실행 엔진"
    layer: 2

  ConstitutionalValidator:
    description: "헌법 준수 검증기"
    enforces:
      - "ALL: 모든 헌법 조항"
      - "P11: 원칙 충돌 검증 (수동)"
      - "P13: 헌법 수정 검증 (수동)"
    role: "헌법 검증"
    layer: 2
    note: "P11, P13은 현재 수동 검토 (자동화 예정)"

  DeepAnalyzer:
    description: "심층 코드 분석기"
    enforces:
      - "P4: SOLID 원칙"
      - "P5: 보안 우선"
      - "P7: Hallucination 방지"
    role: "코드 품질 검증"
    layer: 3
    output: "AnalysisResult (품질 점수 0-10)"

  TeamStatsAggregator:
    description: "팀 통계 집계기"
    enforces:
      - "P6: 품질 게이트"
    role: "전체 프로젝트 통계"
    layer: 3
    output: "TeamStats + Quality Gate (Pass/Fail)"

  ObsidianBridge:
    description: "Obsidian 자동 동기화"
    enforces:
      - "P3: 지식 자산화"
    role: "지식 관리"
    layer: 6
    target_time: "3초"

  StreamlitDashboard:
    description: "Constitution 준수 현황판"
    enforces: []
    role: "시각화 (검증 안 함)"
    layer: 7
    displays:
      - "P6 Quality Gate (Pass/Fail)"
      - "P4, P5 위반 Hotspots TOP 5"
      - "P6 추세 (시간별 품질 변화)"

  VerificationCache:
    description: "검증 결과 캐싱"
    enforces: []
    role: "성능 최적화"
    layer: 4

  CriticalFileDetector:
    description: "스마트 파일 분류"
    enforces: []
    role: "검증 우선순위 결정"
    layer: 4

  DevAssistant:
    description: "실시간 파일 감시"
    enforces:
      - "P4: SOLID 원칙 (실시간)"
      - "P5: 보안 (실시간)"
    role: "실시간 헌법 검증"
    layer: 3


# ==============================================================================
# 워크플로우 (Workflows)
# ==============================================================================

workflows:

  # 새 기능 추가 워크플로우
  feature_development:
    description: "새 기능을 추가하는 표준 워크플로우"
    steps:
      - step: 1
        action: "YAML 계약서 작성"
        file: "TASKS/FEAT-YYYY-MM-DD-NN.yaml"
        articles: ["P1"]

      - step: 2
        action: "헌법 게이트 정의"
        field: "gates:"
        articles: ["P4", "P5", "P6"]

      - step: 3
        action: "TaskExecutor 실행"
        command: "python scripts/task_executor.py TASKS/..."
        articles: ["P2"]

      - step: 4
        action: "DeepAnalyzer 검증"
        automatic: true
        articles: ["P4", "P5", "P7"]

      - step: 5
        action: "Obsidian 동기화"
        automatic: true
        articles: ["P3"]

      - step: 6
        action: "Quality Gate 확인"
        location: "http://localhost:8501"
        articles: ["P6"]

  # 코드 작성 워크플로우
  code_development:
    description: "실시간 코드 검증 워크플로우"
    steps:
      - step: 1
        action: "Dev Assistant 실행"
        command: "python scripts/dev_assistant.py"

      - step: 2
        action: "코드 작성 및 저장"
        automatic_check: "파일 저장 시 자동 검증"

      - step: 3
        action: "즉시 피드백"
        speed: "< 200ms"
        articles: ["P4", "P5"]

      - step: 4
        action: "대시보드 확인"
        location: "http://localhost:8501"
        articles: ["P6"]


# ==============================================================================
# 품질 점수 계산 (Quality Scoring)
# ==============================================================================

scoring:
  formula: |
    시작: 10.0점

    감점:
      - Ruff 위반: -0.2점 (최대 -2.0점)
      - SOLID 위반: -0.5점 (최대 -3.0점)
      - 보안 이슈: -1.0점 (최대 -4.0점)
      - Hallucination: -0.1점 (최대 -1.0점)

    최종: 0.0 - 10.0점

  weights:
    ruff: "20%"
    solid: "30%"
    security: "40%"
    hallucination: "10%"

  thresholds:
    excellent: "≥ 9.0 (A등급)"
    good: "8.0 - 8.9 (B등급)"
    acceptable: "7.0 - 7.9 (C등급)"
    needs_improvement: "6.0 - 6.9 (D등급)"
    failing: "< 6.0 (F등급)"


# ==============================================================================
# 거버넌스 (Governance)
# ==============================================================================

governance:

  amendment_process:
    description: "헌법 수정 절차"
    steps:
      - "변경 이유 문서화"
      - "프로젝트 관리자 리뷰"
      - "하위 호환성 평가"
      - "마이그레이션 계획"
      - "버전 증가 (MAJOR/MINOR/PATCH)"

  compliance_enforcement:
    automated:
      - "Pre-commit hooks"
      - "CI/CD 파이프라인"
      - "DeepAnalyzer 자동 검증"
      - "Dev Assistant 실시간 검증"

    manual:
      - "코드 리뷰"
      - "PR 체크리스트"
      - "분기별 헌법 리뷰"

  exception_handling:
    description: "정당한 헌법 위반 처리"
    requirements:
      - "Complexity Tracking에 문서화"
      - "위반 이유 명시"
      - "코드 리뷰 승인 필요"
      - "향후 리팩토링 TODO 추가"

  review_schedule:
    quarterly: "3개월마다 헌법 리뷰"
    triggers:
      - "주요 아키텍처 변경"
      - "새 도구 추가"
      - "반복적인 헌법 위반"


# ==============================================================================
# 메트릭스 (Metrics)
# ==============================================================================

metrics:

  quality_gate:
    pass_conditions:
      - "평균 품질 ≥ 7.0"
      - "통과율 ≥ 80%"
      - "Critical 보안 이슈 0개"

    display: "Streamlit Dashboard"

  time_savings:
    obsidian_sync: "95% (20min → 3sec)"
    code_verification: "100% (수동 → 자동 0.2sec)"
    annual_total: "264 hours"

  trust_scores:
    constitutional_guards: "7.6 (Hexagon)"
    evidence_tracker: "8.0 (GrowthBook)"
    project_steering: "8.3 (cc-sdd)"
    task_executor: "8.0+"


# ==============================================================================
# 빠른 참조 (Quick Reference)
# ==============================================================================

quick_reference:

  decision_tree: |
    새 작업 시작 전:
      1. YAML 계약서 있나? (P1)
      2. 헌법 게이트 정의했나? (P4, P5, P6)
      3. 증거 수집 설정했나? (P2)
      4. Obsidian 동기화 가능한가? (P3)

    코드 작성 전:
      1. Dev Assistant 실행했나?
      2. 테스트 먼저 작성했나? (P8)
      3. 보안 이슈 없나? (P5)
      4. SOLID 준수하나? (P4)

    커밋 전:
      1. Conventional Commits 형식? (P9)
      2. Quality Gate PASS? (P6)
      3. 이모지 없나? (P10)

  common_commands:
    start_dev_assistant: "python scripts/dev_assistant.py"
    run_task: "python scripts/task_executor.py TASKS/*.yaml"
    check_quality: "streamlit run streamlit_app.py"
    run_deep_analysis: "python scripts/deep_analyzer.py <file>"


# ==============================================================================
# 버전 히스토리 (Version History)
# ==============================================================================

version_history:
  - version: "1.0.0"
    date: "2025-10-23"
    changes:
      - "초기 헌법 작성"
      - "10개 핵심 조항 정의"
      - "도구 매핑 완료"
      - "워크플로우 정의"
    rationale: "실행형 자산 시스템의 기준 확립"


# ==============================================================================
# 우선순위 (Priorities)
# ==============================================================================

priorities:
  critical:
    - "P1: YAML 계약서 우선"
    - "P2: 증거 기반 개발"
    - "P5: 보안 우선"

  high:
    - "P3: 지식 자산화"
    - "P4: SOLID 원칙"
    - "P6: 품질 게이트"
    - "P8: 테스트 우선"

  medium:
    - "P7: Hallucination 방지"
    - "P9: Conventional Commits"
    - "P10: Windows 인코딩"


# ==============================================================================
# 끝
# ==============================================================================

# 이 헌법은 모든 개발 관행보다 우선합니다.
# 충돌 시 헌법이 우선합니다.
