#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Install Obsidian Auto-Sync Git Hook

Installs post-commit hook to automatically sync development work to Obsidian.

Usage:
  python scripts/install_obsidian_auto_sync.py         # Install
  python scripts/install_obsidian_auto_sync.py --check # Check installation
  python scripts/install_obsidian_auto_sync.py --uninstall # Remove hook
"""

import sys
import os
import stat
from pathlib import Path
from typing import Tuple


def get_git_hooks_dir() -> Path:
    """Get .git/hooks directory"""
    repo_root = Path(__file__).parent.parent
    hooks_dir = repo_root / ".git" / "hooks"

    if not hooks_dir.exists():
        raise RuntimeError("Not a git repository or .git/hooks not found")

    return hooks_dir


def check_installation() -> Tuple[bool, str]:
    """Check if auto-sync hook is installed

    Returns:
        (is_installed, message)
    """
    try:
        hooks_dir = get_git_hooks_dir()
        post_commit = hooks_dir / "post-commit"

        if not post_commit.exists():
            return False, "post-commit hook not found"

        content = post_commit.read_text(encoding="utf-8")

        if "auto_sync_obsidian.py" in content:
            return True, "Obsidian auto-sync hook is installed"
        else:
            return False, "post-commit exists but auto-sync not configured"

    except Exception as e:
        return False, f"Check failed: {e}"


def install_hook() -> bool:
    """Install post-commit hook"""
    try:
        hooks_dir = get_git_hooks_dir()
        post_commit = hooks_dir / "post-commit"

        # Auto-sync code to add
        auto_sync_code = """
# Obsidian Auto-Sync (added by install_obsidian_auto_sync.py)
python scripts/auto_sync_obsidian.py --quiet
"""

        if post_commit.exists():
            # Check if already installed
            content = post_commit.read_text(encoding="utf-8")

            if "auto_sync_obsidian.py" in content:
                print("[INFO] Obsidian auto-sync hook already installed")
                return True

            # Append to existing hook
            print("[INFO] Existing post-commit hook found, appending auto-sync...")
            with post_commit.open("a", encoding="utf-8") as f:
                f.write("\n" + auto_sync_code)

        else:
            # Create new hook
            print("[INFO] Creating new post-commit hook...")
            hook_content = f"""#!/bin/sh
# Git post-commit hook
# Auto-generated by dev-rules-starter-kit
{auto_sync_code}
"""
            post_commit.write_text(hook_content, encoding="utf-8")

        # Make executable (Unix/Linux/Mac)
        if os.name != "nt":  # Not Windows
            st = os.stat(post_commit)
            os.chmod(post_commit, st.st_mode | stat.S_IEXEC)

        print(f"[SUCCESS] Obsidian auto-sync hook installed: {post_commit}")
        return True

    except Exception as e:
        print(f"[ERROR] Installation failed: {e}")
        return False


def uninstall_hook() -> bool:
    """Remove auto-sync from post-commit hook"""
    try:
        hooks_dir = get_git_hooks_dir()
        post_commit = hooks_dir / "post-commit"

        if not post_commit.exists():
            print("[INFO] post-commit hook not found, nothing to uninstall")
            return True

        content = post_commit.read_text(encoding="utf-8")

        if "auto_sync_obsidian.py" not in content:
            print("[INFO] Obsidian auto-sync not installed in post-commit hook")
            return True

        # Remove auto-sync lines
        lines = content.split("\n")
        new_lines = []
        skip_next = False

        for line in lines:
            if "Obsidian Auto-Sync" in line:
                skip_next = True
                continue
            if skip_next and "auto_sync_obsidian.py" in line:
                skip_next = False
                continue
            new_lines.append(line)

        new_content = "\n".join(new_lines)

        # If hook is now empty (only shebang), delete it
        if new_content.strip() in ["#!/bin/sh", "#!/bin/bash", ""]:
            post_commit.unlink()
            print("[SUCCESS] Empty post-commit hook removed")
        else:
            post_commit.write_text(new_content, encoding="utf-8")
            print("[SUCCESS] Obsidian auto-sync uninstalled from post-commit hook")

        return True

    except Exception as e:
        print(f"[ERROR] Uninstallation failed: {e}")
        return False


def test_hook() -> bool:
    """Test auto-sync script"""
    try:
        import subprocess

        print("[TEST] Running auto_sync_obsidian.py...")
        result = subprocess.run(
            [sys.executable, "scripts/auto_sync_obsidian.py"], capture_output=True, text=True, timeout=10
        )

        print(result.stdout)
        if result.stderr:
            print(result.stderr)

        if result.returncode == 0:
            print("[SUCCESS] Auto-sync test passed")
            return True
        else:
            print(f"[WARN] Auto-sync test returned code {result.returncode}")
            return False

    except Exception as e:
        print(f"[ERROR] Test failed: {e}")
        return False


def print_usage():
    """Print usage information"""
    print("""
Obsidian Auto-Sync Installer
=============================

Usage:
  python scripts/install_obsidian_auto_sync.py           # Install hook
  python scripts/install_obsidian_auto_sync.py --check   # Check installation
  python scripts/install_obsidian_auto_sync.py --test    # Test hook
  python scripts/install_obsidian_auto_sync.py --uninstall # Remove hook

What it does:
  - Installs post-commit Git hook
  - Automatically syncs to Obsidian after each commit
  - Triggers on: 3+ files, features, bugs, refactoring

Requirements:
  - OBSIDIAN_VAULT_PATH set in .env
  - OBSIDIAN_ENABLED=true in .env

After installation:
  - Commit your changes as usual: git commit -m "feat: add feature"
  - Auto-sync runs automatically after commit
  - Check Obsidian 개발일지/ directory for new logs
    """)


def main():
    """Main execution"""
    args = sys.argv[1:]

    if "--help" in args or "-h" in args:
        print_usage()
        return 0

    if "--check" in args:
        is_installed, message = check_installation()
        print(f"[{'OK' if is_installed else 'NOT INSTALLED'}] {message}")
        return 0 if is_installed else 1

    if "--uninstall" in args:
        success = uninstall_hook()
        return 0 if success else 1

    if "--test" in args:
        success = test_hook()
        return 0 if success else 1

    # Default: install
    print("Installing Obsidian Auto-Sync Hook...")
    print("=" * 50)

    success = install_hook()

    if success:
        print("\n" + "=" * 50)
        print("[SUCCESS] Installation complete!")
        print("\nNext steps:")
        print("1. Ensure .env has OBSIDIAN_VAULT_PATH and OBSIDIAN_ENABLED=true")
        print("2. Make a commit: git commit -m 'test: verify auto-sync'")
        print("3. Check Obsidian 개발일지/ for new log")
        print("\nTo verify installation:")
        print("  python scripts/install_obsidian_auto_sync.py --check")
        return 0
    else:
        return 1


if __name__ == "__main__":
    sys.exit(main())
