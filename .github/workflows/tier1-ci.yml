name: Tier 1 Integration CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'requirements*.txt'
      - '.github/workflows/tier1-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'tests/**'

env:
  PYTHON_VERSION: '3.8'
  COVERAGE_THRESHOLD: 85

jobs:
  lint:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black mypy
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        black --check scripts/ tests/

    - name: Run Flake8 linter
      run: |
        flake8 scripts/ tests/ --max-line-length=120 --extend-ignore=E203,W503

    - name: Run MyPy type checker
      run: |
        mypy scripts/ --ignore-missing-imports

  security:
    name: Security Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt

    - name: Run security tests
      run: |
        pytest tests/test_security_utils.py -v --tb=short

    - name: Verify security patches
      run: |
        python scripts/security_utils.py

  test:
    name: Unit & Integration Tests
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install -r requirements.txt

    - name: Run unit tests with coverage
      run: |
        pytest tests/ -v --cov=scripts --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.python-version }}

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=${{ env.COVERAGE_THRESHOLD }}

  integration:
    name: E2E Integration Tests
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout
        pip install -r requirements.txt

    - name: Run E2E integration tests
      run: |
        pytest tests/test_integration_e2e.py -v --timeout=60

    - name: Run parallel processing benchmark
      run: |
        python scripts/parallel_processor.py --benchmark

    - name: Test error recovery system
      run: |
        python scripts/unified_error_system.py --test

  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [integration]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance benchmarks
      run: |
        python scripts/parallel_processor.py --benchmark > benchmark_results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.txt

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = fs.readFileSync('benchmark_results.txt', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## Performance Benchmark Results\n\`\`\`\n${results}\n\`\`\``
          });

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [integration]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build distribution packages
      run: |
        python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/tier1-integration:latest
          ${{ secrets.DOCKER_USERNAME }}/tier1-integration:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/tier1-integration:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/tier1-integration:buildcache,mode=max

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install documentation tools
      run: |
        pip install mkdocs mkdocs-material mkdocstrings

    - name: Build documentation
      run: |
        mkdocs build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        cname: tier1.example.com
